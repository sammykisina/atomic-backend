version: "3"
services:
    atomic-backend-app:
        build:
            context: ./
            dockerfile: Dockerfile
        image: 34996980/atomic-backend-image:v1.0.0
        container_name: atomic-backend-container
        restart: unless-stopped
        working_dir: /var/www
        volumes:
            - ./:/var/www
        networks:
            - atomic-backend-network
        depends_on:
            db:
                condition: service_healthy # Wait for the MySQL container to be healthy
        environment:
            DB_CONNECTION: ${DB_CONNECTION}
            DB_HOST: atomic-backend-db-container
            DB_PORT: ${DB_PORT}
            DB_DATABASE: ${DB_DATABASE}
            DB_USERNAME: ${DB_USERNAME}
            DB_PASSWORD: ${DB_PASSWORD}

    db:
        image: mysql:8.0
        container_name: atomic-backend-db-container
        restart: unless-stopped
        ports:
            - 3306:3306
        environment:
            - MYSQL_ROOT_PASSWORD=atomic
        volumes:
            - db-data:/var/lib/mysql
            - ./docker-compose/mysql:/docker-entrypoint-initdb.d
        networks:
            - atomic-backend-network
        healthcheck:
            test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
            interval: 10s
            timeout: 5s
            retries: 5

    nginx:
        image: nginx:alpine
        container_name: atomic-backend-nginx-container
        restart: unless-stopped
        ports:
            - 8080:80
        volumes:
            - ./:/var/www
            - ./docker-compose/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
        networks:
            - atomic-backend-network

    queue-worker:
        build:
            context: ./
            dockerfile: Dockerfile
        container_name: atomic-backend-queue-worker
        restart: unless-stopped
        working_dir: /var/www/
        command: php artisan queue:work --verbose --timeout=0 --tries=3
        depends_on:
            db:
                condition: service_healthy
            atomic-backend-app:
                condition: service_started
        volumes:
            - ./:/var/www
        environment:
            DB_CONNECTION: ${DB_CONNECTION}
            DB_HOST: atomic-backend-db-container
            DB_PORT: ${DB_PORT}
            DB_DATABASE: ${DB_DATABASE}
            DB_USERNAME: ${DB_USERNAME}
            DB_PASSWORD: ${DB_PASSWORD}
        networks:
            - atomic-backend-network

    # reverb:
    #     build:
    #         context: ./
    #         dockerfile: Dockerfile
    #     container_name: atomic-backend-reverb
    #     restart: unless-stopped
    #     working_dir: /var/www/
    #     command: php artisan reverb:start --debug
    #     depends_on:
    #         - db
    #         - atomic-backend-app
    #     volumes:
    #         - ./:/var/www
    #     ports:
    #         - "8081:8080" # Expose WebSocket port
    #     environment:
    #         DB_CONNECTION: ${DB_CONNECTION}
    #         DB_HOST: atomic-backend-db-container
    #         DB_PORT: ${DB_PORT}
    #         DB_DATABASE: ${DB_DATABASE}
    #         DB_USERNAME: ${DB_USERNAME}
    #         DB_PASSWORD: ${DB_PASSWORD}
    #         REVERB_APP_ID: 460890
    #         REVERB_APP_KEY: o3het0elk13bgxqsaw3d
    #         REVERB_APP_SECRET: 5dp2bwzs2mtrd7pq1w2j
    #         REVERB_HOST: "localhost"
    #         REVERB_PORT: 8080
    #         REVERB_SCHEME: http
    #         VITE_REVERB_APP_KEY: "${REVERB_APP_KEY}"
    #         VITE_REVERB_HOST: "${REVERB_HOST}"
    #         VITE_REVERB_PORT: "${REVERB_PORT}"
    #         VITE_REVERB_SCHEME: "${REVERB_SCHEME}"
    #     networks:
    #         - atomic-backend-network

    queue-listen:
        build:
            context: ./
            dockerfile: Dockerfile
        container_name: atomic-backend-queue-listen
        restart: unless-stopped
        working_dir: /var/www/
        command: php artisan queue:listen
        depends_on:
            - db
            - atomic-backend-app
        volumes:
            - ./:/var/www
        environment:
            DB_CONNECTION: ${DB_CONNECTION}
            DB_HOST: atomic-backend-db-container
            DB_PORT: ${DB_PORT}
            DB_DATABASE: ${DB_DATABASE}
            DB_USERNAME: ${DB_USERNAME}
            DB_PASSWORD: ${DB_PASSWORD}
        networks:
            - atomic-backend-network

networks:
    atomic-backend-network:
        driver: bridge

volumes:
    db-data:
